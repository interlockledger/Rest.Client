<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net6.0</TargetFrameworks>
		<Version>7.0.0</Version>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<Copyright>Copyright (c) 2018-2022 InterlockLedger Network</Copyright>
		<Description>
			This library implements a C# wrapper around the InterlockLedger Node REST API.

			BSD 3-Clause License
		</Description>
		<PackageLicenseUrl></PackageLicenseUrl>
		<PackageProjectUrl>https://interlockledger.network/</PackageProjectUrl>
		<RepositoryUrl>https://github.com/interlockledger/interlockledger-rest-client-csharp.git</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
		<GeneratePackageOnBuild>true</GeneratePackageOnBuild>
		<PackageTags>REST Client InterlockLedger</PackageTags>
		<PackageReleaseNotes>Some API/ABI changes - Update/Remove dependencies</PackageReleaseNotes>
		<PackageIcon>IL2.png</PackageIcon>
		<Authors>InterlockLedger Network</Authors>
		<Product>InterlockLedger</Product>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
		<ImplicitUsings>Enable</ImplicitUsings>
	</PropertyGroup>

	<ItemGroup>
		<Using Include="InterlockLedger.Rest.Client.Abstractions" />
		<Using Include="InterlockLedger.Tags" />
		<Using Include="System.Security.Cryptography" />
		<Using Include="System.Security.Cryptography.X509Certificates" />
		<Using Include="System.Text" />
		<Using Include="System.Text.Json" />
		<Using Include="System.Text.Json.Serialization" />
		<Using Include="System.Text.RegularExpressions" />
		<Using Include="System.Web" />
	</ItemGroup>
	<ItemGroup>
		<PackageReference Include="InterlockLedger.Tags.ILInt" Version="5.0.2" />
		<PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.3">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.3.1" />
	</ItemGroup>

	<ItemGroup>
		<None Include="..\LICENSE">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
		<None Include="..\IL2.png">
			<Pack>True</Pack>
			<PackagePath></PackagePath>
		</None>
	</ItemGroup>
    <Target Name="TagSources">
        <Exec Command="git tag v$(Version)" ContinueOnError="true" StandardErrorImportance="low" StandardOutputImportance="low" IgnoreExitCode="true" />
        <Message Importance="high" Text="Recent tags:" />
        <Exec Command="git tag --sort=-creatordate | grep v | head -n 1" ContinueOnError="true" StandardErrorImportance="high" StandardOutputImportance="high" IgnoreExitCode="true" />
    </Target>

    <Target Name="PublishLocally" AfterTargets="Pack" Condition="Exists('$(INTERLOCK_LOCAL_NUGETS_FOLDER)')">
        <ItemGroup>
            <NugetPackages Include="$(PackageOutputAbsolutePath)\*.nupkg" />
        </ItemGroup>
        <Message Importance="high" Text="Publish to Local Nugets Folder '$(INTERLOCK_LOCAL_NUGETS_FOLDER)'" />
        <Copy DestinationFolder="$(INTERLOCK_LOCAL_NUGETS_FOLDER)" SourceFiles="@(NugetPackages)" ContinueOnError="true" SkipUnchangedFiles="false" />
    </Target>

    <Target Name="NugetOrg" Condition="'$(Configuration)'=='Release'" DependsOnTargets="Pack">
        <PropertyGroup>
            <NugetPackage>$(PackageOutputAbsolutePath)$(PackageId).$(Version).nupkg</NugetPackage>
        </PropertyGroup>
        <Message Importance="high" Text="Pushing $(NugetPackage)" Condition="Exists('$(NugetPackage)')" />
        <Exec Command="dotnet nuget push --skip-duplicate -s nuget.org $(NugetPackage)" ContinueOnError="true" StandardErrorImportance="high" StandardOutputImportance="high" IgnoreExitCode="true" Condition="Exists('$(NugetPackage)')" />
    </Target>

</Project>
